package net.gumbix.bioinf.string.seq.test

import net.gumbix.util.Logger
import junit.framework.TestCase
import io.Source.fromFile
import net.gumbix.bioinf.string.seq.{DoubleDigest, GreedySuperstringFct, Fragments}

/**
 * @author Markus Gumbel (m.gumbel@hs-mannheim.de)
 */

class SeqDemoTest extends TestCase with Logger {
  logLevel = true

  def testDoubleDigestDemo() {
    val d = new DoubleDigest(List(1, 2, 3), List(2, 4), List(1, 1, 2, 2))
    d.printSolutions
  }

  /**
   * Example taken from Boeckenhauer p 121.
   */
  def testDoubleDigestBoeckenhauerP121() {
    val d = new DoubleDigest(List(2, 2, 4, 5, 7, 7, 7),
      List(2, 2, 4, 4, 5, 7, 10),
      List(1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 7))
    d.printSolutions
  }

  /**
   * My own example. Produces 20 solutions.
   */
  def testDoubleDigestGumbel01() {
    val d = new DoubleDigest(List(1, 4, 3, 2),
      List(2, 2, 3, 3),
      List(1, 1, 2, 1, 2, 1, 2))
    d.printSolutions
  }

  /**
   * Like in PPT.
   */
  def testFragmentationExample() {
    println("Assembly Demo")
    val s = "AGTATACGGAACTAC"
    val fragments = new Fragments(s, 2, 3, 1).fragments.toArray
    log(fragments.mkString(", "))

    val gs = new GreedySuperstringFct(fragments) {
      logLevel = true
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in PPT.
   */
  def testGreedySuperstringExample() {
    logLevel = true
    println("GreedySuperstring Demo")
    val s = "AGTATACGGAACTACAGCTTATGCTATTATC"
    val fragments = new Fragments(s, 5, 5, 1).fragments.toArray
    log(fragments.mkString(", "))

    val gs = new GreedySuperstringFct(fragments) {
      logLevel = true
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in PPT but randomly.
   */
  def testGreedySuperstringExampleRandom() {
    logLevel = true
    println("GreedySuperstring Demo")
    val s = "AGTATACGGAACTACAGCTTATGCTATTATC"
    val fragments = new Fragments(s, 5, 5, 1).randomFragments.toArray
    log(fragments.mkString(", "))

    val gs = new GreedySuperstringFct(fragments) {
      logLevel = true
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }


  /**
   * Like in PPT.
   */
  def testFragmentationKW10() {
    println("Assembly Klausur Wintersemester 2010")
    //val s = "AGTATACGGAACTAC"
    val s = "AGCATACGGAAGTAC"
    val fragments = new Fragments(s, 2, 3, 1).fragments.toArray
    log(fragments.mkString(", "))

    val gs = new GreedySuperstringFct(fragments) {
      logLevel = true
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Example how the greedy approach fails.
   * Adapted from Mihai Pop 2010: Genome assembly reborn.
   * Briefing in Bioinformatics, 10:4, p. 354-366. 
   */
  def testGreedyFailure01() {
    println("Greedy Failure")
    val s = "dieser text am anfang steht immer am anfang nicht wahr"
    val fragments = Array(
      "dieser text am anfang",
      "anfang steht",
      "steht immer am an",
      "am anfang nicht wahr"
      )
    val gs = new GreedySuperstringFct(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore MI text.
   */
  def testExerciseMI() {
    val s = "Informatiker mit medizinischer Vorbildung werden mittlerweile für viele Aufgaben gesucht, z.B. bei der Einführung der Elektronischen Gesundheitskarte (dem größten IT-Projekt der Welt!), bei der rechnerbasierten Unterstützung der integrierten Versorgung von medizinischen Kompetenzzentren, in Disease Management Programmen oder bei der vermehrten Einbindung von Medizingeräten. Die Fakultät für Informatik arbeitet unter anderem mit einer Vielzahl von Krankenhäusern (z. B. Universitätsklinikum Mannheim, Universitätsklinikum Heidelberg, Klinikum Ludwigshafen am Rhein), dem Deutschen Krebsforschungszentrum Heidelberg und vielen Unternehmen in der Region (z. B. InterComponentWare, SAP, iSOFT) zusammen, um Lehrveranstaltungen aus dem medizinischen Bereich sowie vielfältige Möglichkeiten für Projektarbeiten, Praxissemester und Bachelorabschlussarbeiten anzubieten. Schon heute finden viele Absolventen der Mannheimer Informatik-Studiengänge, die den Schwerpunkt Medizinische Informatik gewählt haben, Anstellungen in Firmen und Institutionen, die sich mit Medizinischer Informatik beschäftigen. Die Nachfrage nach Informatikern mit Kenntnissen in Medizinischer Informatik ist wesentlich größer, als es Absolventen mit derartigen Kenntnissen gibt. Diese Tatsache wird durch wöchentliche Nachfragen nach Absolventen und Praktikanten von Unternehmen und sonstigen Einrichtungen der Gesundheitsbranche beim Institut für Medizinische Informatik belegt."
    val fragments = new Fragments(s, 10, 12, 2).randomFragments.toArray
    logLevel = true
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore MI text from file.
   */
  def testVerifyExerciseMI() {
    val s = "Informatiker mit medizinischer Vorbildung werden mittlerweile für viele Aufgaben gesucht, z.B. bei der Einführung der Elektronischen Gesundheitskarte (dem größten IT-Projekt der Welt!), bei der rechnerbasierten Unterstützung der integrierten Versorgung von medizinischen Kompetenzzentren, in Disease Management Programmen oder bei der vermehrten Einbindung von Medizingeräten. Die Fakultät für Informatik arbeitet unter anderem mit einer Vielzahl von Krankenhäusern (z. B. Universitätsklinikum Mannheim, Universitätsklinikum Heidelberg, Klinikum Ludwigshafen am Rhein), dem Deutschen Krebsforschungszentrum Heidelberg und vielen Unternehmen in der Region (z. B. InterComponentWare, SAP, iSOFT) zusammen, um Lehrveranstaltungen aus dem medizinischen Bereich sowie vielfältige Möglichkeiten für Projektarbeiten, Praxissemester und Bachelorabschlussarbeiten anzubieten. Schon heute finden viele Absolventen der Mannheimer Informatik-Studiengänge, die den Schwerpunkt Medizinische Informatik gewählt haben, Anstellungen in Firmen und Institutionen, die sich mit Medizinischer Informatik beschäftigen. Die Nachfrage nach Informatikern mit Kenntnissen in Medizinischer Informatik ist wesentlich größer, als es Absolventen mit derartigen Kenntnissen gibt. Diese Tatsache wird durch wöchentliche Nachfragen nach Absolventen und Praktikanten von Unternehmen und sonstigen Einrichtungen der Gesundheitsbranche beim Institut für Medizinische Informatik belegt."
    val fragments = load("d:/users/markus/Local-Docs/Professur-HS-Mannheim/Vorlesungen/BIM/Supplement/MI-fragments.txt")
    logLevel = false
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore DNA text.
   */
  def testExerciseDNA() {
    val s = "ACTCTCTCCTCCTCCTCACCTCATTGTCTCCCCGACTTATCCTAATGCGAAATTGGATTCTGAGCATTTGTAGCAAAATCGCTGGGATCTGGAGAGGAAGACTCAGTCCAGAATCCTCCCAGGGCCTTGAAAGTCCATCTCTGACCCAAAACAATCCAAGTAAGTACCTAATTCCTTTGGGAGTGGGTTGTGTATCTCACAGCAACAGAGAAAAAATAGTCACTTAAAAGTTTCTCTTTGACATCTGTAATGTATGTCAATAAATGAATTCTAAGTTAGTAGAGTTTGATGTAAAGTCCTGAAAATTAAAAAAGAGAGAAACTAAAAAACAAAAAGAAGCAGAAGCAAAAGTTAATGAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATACTCTTTTAACATTGTGGTCACCTGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTTCTGATTCCATAAACAATTTGACTTGTATAGTGTGCTATATTTTGGTGATTTATCAAATCTTGATGTGAGTTTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTCCCTAGAAGAAGAGTAGGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTTTAAAAGATAGAAATGTGAGTATGACGAAGAACTTTAGTAATAAAATTGTCCAAGGACTAAATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGAGTGAATGGGGCAACTGTGGAGCCTGACTTACTTCTTTTAATTGGGTTTTTATTCAGAAGGGAGGGGCAGGAGGGAATGACAAGTGACTCACCTTGAATTCTTCCTCTAAGAAACTCACACCTGAGCTTTGAGCTATAAAGAAATCTGATGCTGTTTCTGGTGCTGTCTTAGAATCACTTCAGGAGTATTGACAAGAGGGGTAGGAACCCTTAGAAATAATATTAGTGATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTATAGATTGTGGTGATGATTTAATGAGTGTATGCCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAATTTTTTTTTCTGTTCCTAAAAAAAGGAAGGGAGAAGAGAGGAAAAGATGTTCAGGGAGCTACCATTTTGTTTCTAGCTGTGATTTTATAAAATGATAGACACTTTTATCTTTGTGTTACGTTCCTACCCCCAGTCCTCCAAATTATGGATCTGTGCCATTTGTACCGTGGACTTTTCTGTTTTCTGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACCCTTCCTCAAGATTTGCAGCAATTTCCCACCACGTACCTCTGCCCTCTCCTCACAGCTGGAGAGGGAAAGTCATGGAATCCTTGTCCTTCCTCTTGTTTCCACCTCTTCAAGATTGGGCCAATTGCAATGGAATATCCATTGGTTGTGAGGCCTTTGTACTCTGCAAGGAAAAGAAAAGAAATGTGTGTATGTATGAGTGTGTGATGGAGCTAACTTTTCTACAATGTCTACTAACATGTCCTAGCCTTTACTTCATTCGCCTGTTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATCGGCTCACTGCAGCCTCCACCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGTACTACAGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGAAGTAGCGGGACCTGAACTTGAGGGCGGGTCTTTCTGACTCCAAAGCCTCTTCCTGGCTACTCTGATATTGGCTATTGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCCGTTAAGCATTCCAGCCTGACAGGGGTGATTTGTTAAACCCAGGAACTAGTTAGACGTTTCCTGAAACCTCCTGCATAGGGCATTTTCGAGAGATTGCACCATCA"
    val fragments = new Fragments(s, 10, 20, 3).randomFragments.toArray
    logLevel = true
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore DNA text.
   */
  def testVerifyExerciseDNA() {
    val s = "ACTCTCTCCTCCTCCTCACCTCATTGTCTCCCCGACTTATCCTAATGCGAAATTGGATTCTGAGCATTTGTAGCAAAATCGCTGGGATCTGGAGAGGAAGACTCAGTCCAGAATCCTCCCAGGGCCTTGAAAGTCCATCTCTGACCCAAAACAATCCAAGTAAGTACCTAATTCCTTTGGGAGTGGGTTGTGTATCTCACAGCAACAGAGAAAAAATAGTCACTTAAAAGTTTCTCTTTGACATCTGTAATGTATGTCAATAAATGAATTCTAAGTTAGTAGAGTTTGATGTAAAGTCCTGAAAATTAAAAAAGAGAGAAACTAAAAAACAAAAAGAAGCAGAAGCAAAAGTTAATGAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATACTCTTTTAACATTGTGGTCACCTGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTTCTGATTCCATAAACAATTTGACTTGTATAGTGTGCTATATTTTGGTGATTTATCAAATCTTGATGTGAGTTTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTCCCTAGAAGAAGAGTAGGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTTTAAAAGATAGAAATGTGAGTATGACGAAGAACTTTAGTAATAAAATTGTCCAAGGACTAAATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGAGTGAATGGGGCAACTGTGGAGCCTGACTTACTTCTTTTAATTGGGTTTTTATTCAGAAGGGAGGGGCAGGAGGGAATGACAAGTGACTCACCTTGAATTCTTCCTCTAAGAAACTCACACCTGAGCTTTGAGCTATAAAGAAATCTGATGCTGTTTCTGGTGCTGTCTTAGAATCACTTCAGGAGTATTGACAAGAGGGGTAGGAACCCTTAGAAATAATATTAGTGATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTATAGATTGTGGTGATGATTTAATGAGTGTATGCCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAATTTTTTTTTCTGTTCCTAAAAAAAGGAAGGGAGAAGAGAGGAAAAGATGTTCAGGGAGCTACCATTTTGTTTCTAGCTGTGATTTTATAAAATGATAGACACTTTTATCTTTGTGTTACGTTCCTACCCCCAGTCCTCCAAATTATGGATCTGTGCCATTTGTACCGTGGACTTTTCTGTTTTCTGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACCCTTCCTCAAGATTTGCAGCAATTTCCCACCACGTACCTCTGCCCTCTCCTCACAGCTGGAGAGGGAAAGTCATGGAATCCTTGTCCTTCCTCTTGTTTCCACCTCTTCAAGATTGGGCCAATTGCAATGGAATATCCATTGGTTGTGAGGCCTTTGTACTCTGCAAGGAAAAGAAAAGAAATGTGTGTATGTATGAGTGTGTGATGGAGCTAACTTTTCTACAATGTCTACTAACATGTCCTAGCCTTTACTTCATTCGCCTGTTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATCGGCTCACTGCAGCCTCCACCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGTACTACAGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGAAGTAGCGGGACCTGAACTTGAGGGCGGGTCTTTCTGACTCCAAAGCCTCTTCCTGGCTACTCTGATATTGGCTATTGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCCGTTAAGCATTCCAGCCTGACAGGGGTGATTTGTTAAACCCAGGAACTAGTTAGACGTTTCCTGAAACCTCCTGCATAGGGCATTTTCGAGAGATTGCACCATCA"
    val fragments = load("d:/users/markus/Local-Docs/Professur-HS-Mannheim/Vorlesungen/BIM/Supplement/DNA-fragments-complete.txt")
    logLevel = false
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore DNA text.
   */
  def testVerifyExerciseShortDNA() {
    val s = "ACTCTCTCCTCCTCCTCACCTCATTGTCTCCCCGACTTATCCTAATGCGAAATTGGATTCTGAGCATTTGTAGCAAAATCGCTGGGATCTGGAGAGGAAGACTCAGTCCAGAATCCTCCCAGGGCCTTGAAAGTCCATCTCTGACCCAAAACAATCCAAGTAAGTACCTAATTCCTTTGGGAGTGGGTTGTGTATCTCACAGCAACAGAGAAAAAATAGTCACTTAAAAGTTTCTCTTTGACATCTGTAATGTATGTCAATAAATGAATTCTAAGTTAGTAGAGTTTGATGTAAAGTCCTGAAAATTAAAAAAGAGAGAAACTAAAAAACAAAAAGAAGCAGAAGCAAAAGTTAATGAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATACTCTTTTAACATTGTGGTCACCTGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTTCTGATTCCATAAACAATTTGACTTGTATAGTGTGCTATATTTTGGTGATTTATCAAATCTTGATGTGAGTTTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTCCCTAGAAGAAGAGTAGGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTTTAAAAGATAGAAATGTGAGTATGACGAAGAACTTTAGTAATAAAATTGTCCAAGGACTAAATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGAGTGAATGGGGCAACTGTGGAGCCTGACTTACTTCTTTTAATTGGGTTTTTATTCAGAAGGGAGGGGCAGGAGGGAATGACAAGTGACTCACCTTGAATTCTTCCTCTAAGAAACTCACACCTGAGCTTTGAGCTATAAAGAAATCTGATGCTGTTTCTGGTGCTGTCTTAGAATCACTTCAGGAGTATTGACAAGAGGGGTAGGAACCCTTAGAAATAATATTAGTGATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTATAGATTGTGGTGATGATTTAATGAGTGTATGCCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAATTTTTTTTTCTGTTCCTAAAAAAAGGAAGGGAGAAGAGAGGAAAAGATGTTCAGGGAGCTACCATTTTGTTTCTAGCTGTGATTTTATAAAATGATAGACACTTTTATCTTTGTGTTACGTTCCTACCCCCAGTCCTCCAAATTATGGATCTGTGCCATTTGTACCGTGGACTTTTCTGTTTTCTGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACCCTTCCTCAAGATTTGCAGCAATTTCCCACCACGTACCTCTGCCCTCTCCTCACAGCTGGAGAGGGAAAGTCATGGAATCCTTGTCCTTCCTCTTGTTTCCACCTCTTCAAGATTGGGCCAATTGCAATGGAATATCCATTGGTTGTGAGGCCTTTGTACTCTGCAAGGAAAAGAAAAGAAATGTGTGTATGTATGAGTGTGTGATGGAGCTAACTTTTCTACAATGTCTACTAACATGTCCTAGCCTTTACTTCATTCGCCTGTTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATCGGCTCACTGCAGCCTCCACCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGTACTACAGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGAAGTAGCGGGACCTGAACTTGAGGGCGGGTCTTTCTGACTCCAAAGCCTCTTCCTGGCTACTCTGATATTGGCTATTGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCCGTTAAGCATTCCAGCCTGACAGGGGTGATTTGTTAAACCCAGGAACTAGTTAGACGTTTCCTGAAACCTCCTGCATAGGGCATTTTCGAGAGATTGCACCATCA"
    val fragments = load("d:/users/markus/Local-Docs/Professur-HS-Mannheim/Vorlesungen/BIM/Supplement/DNA-fragments-complete-but-wrong.txt")
    logLevel = false
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  /**
   * Like in exercise. Restore DNA text.
   */
  def testVerifyExerciseShortestDNA() {
    val s = "ACTCTCTCCTCCTCCTCACCTCATTGTCTCCCCGACTTATCCTAATGCGAAATTGGATTCTGAGCATTTGTAGCAAAATCGCTGGGATCTGGAGAGGAAGACTCAGTCCAGAATCCTCCCAGGGCCTTGAAAGTCCATCTCTGACCCAAAACAATCCAAGTAAGTACCTAATTCCTTTGGGAGTGGGTTGTGTATCTCACAGCAACAGAGAAAAAATAGTCACTTAAAAGTTTCTCTTTGACATCTGTAATGTATGTCAATAAATGAATTCTAAGTTAGTAGAGTTTGATGTAAAGTCCTGAAAATTAAAAAAGAGAGAAACTAAAAAACAAAAAGAAGCAGAAGCAAAAGTTAATGAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATACTCTTTTAACATTGTGGTCACCTGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTTCTGATTCCATAAACAATTTGACTTGTATAGTGTGCTATATTTTGGTGATTTATCAAATCTTGATGTGAGTTTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTCCCTAGAAGAAGAGTAGGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTTTAAAAGATAGAAATGTGAGTATGACGAAGAACTTTAGTAATAAAATTGTCCAAGGACTAAATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGAGTGAATGGGGCAACTGTGGAGCCTGACTTACTTCTTTTAATTGGGTTTTTATTCAGAAGGGAGGGGCAGGAGGGAATGACAAGTGACTCACCTTGAATTCTTCCTCTAAGAAACTCACACCTGAGCTTTGAGCTATAAAGAAATCTGATGCTGTTTCTGGTGCTGTCTTAGAATCACTTCAGGAGTATTGACAAGAGGGGTAGGAACCCTTAGAAATAATATTAGTGATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTATAGATTGTGGTGATGATTTAATGAGTGTATGCCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAATTTTTTTTTCTGTTCCTAAAAAAAGGAAGGGAGAAGAGAGGAAAAGATGTTCAGGGAGCTACCATTTTGTTTCTAGCTGTGATTTTATAAAATGATAGACACTTTTATCTTTGTGTTACGTTCCTACCCCCAGTCCTCCAAATTATGGATCTGTGCCATTTGTACCGTGGACTTTTCTGTTTTCTGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACCCTTCCTCAAGATTTGCAGCAATTTCCCACCACGTACCTCTGCCCTCTCCTCACAGCTGGAGAGGGAAAGTCATGGAATCCTTGTCCTTCCTCTTGTTTCCACCTCTTCAAGATTGGGCCAATTGCAATGGAATATCCATTGGTTGTGAGGCCTTTGTACTCTGCAAGGAAAAGAAAAGAAATGTGTGTATGTATGAGTGTGTGATGGAGCTAACTTTTCTACAATGTCTACTAACATGTCCTAGCCTTTACTTCATTCGCCTGTTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATCGGCTCACTGCAGCCTCCACCTCCCGGGTTCAAGCGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGTACTACAGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGAAGTAGCGGGACCTGAACTTGAGGGCGGGTCTTTCTGACTCCAAAGCCTCTTCCTGGCTACTCTGATATTGGCTATTGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCCGTTAAGCATTCCAGCCTGACAGGGGTGATTTGTTAAACCCAGGAACTAGTTAGACGTTTCCTGAAACCTCCTGCATAGGGCATTTTCGAGAGATTGCACCATCA"
    val fragments = load("d:/users/markus/Local-Docs/Professur-HS-Mannheim/Vorlesungen/BIM/Supplement/DNA-fragments-incomplete.txt")
    logLevel = false
    log(fragments.mkString("\n"))
    val gs = new GreedySuperstringFct(fragments) {
      logLevel = false
    }
    // val gs = new GreedySuperstringImperative(fragments)
    analyse(gs, s)
  }

  private def analyse(gs: GreedySuperstringFct, s: String) {

    def eq(s1: String, s2: String) = if (s1 == s2) "=" else "!="

    if (gs.superstrings.size == 1) {
      println("\nDone with result " + eq(s, gs.superstrings.head))
      println("\n'" + s + "' " + eq(s, gs.superstrings.head) + " '" +
              gs.superstrings.head + "'")
    } else {
      println("Incompleted, more than one contig remaining:")
      println(gs.superstrings.mkString("|"))
    }
  }

  private def load(file: String) = fromFile(file).getLines.toArray
 
}